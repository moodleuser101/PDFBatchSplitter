/*
 * Copyright (C) 2024 pmreid
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.reid.pdfbatchsplitter;

import com.reid.pdfbatchsplitter.domain.primitives.SearchTerm;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.IntStream;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author pmreid
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        populateSearchTable();
    }

    /**
     * Simple helper method to populate the JTable with basic search terms
     */
    private void populateSearchTable() {
        List<String> columns = new ArrayList<>(Arrays.asList("Name", "Regular expression pattern", "Target group"));
        String[][] rows = new String[PDFBatchSplitter.search.size()][];
        int i = 0;
        for (SearchTerm t : PDFBatchSplitter.search) {
            rows[i] = new String[columns.size()];
            rows[i][0] = t.getLabel();
            rows[i][1] = t.getRegex();
            rows[i][2] = String.valueOf(t.getOutputGroup());
            i++;
        }
        TableModel tableModel = new DefaultTableModel(rows, columns.toArray());
        this.jTableSearchTerms.setModel(tableModel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextSourceFile = new javax.swing.JTextField();
        jLabelSourceFile = new javax.swing.JLabel();
        jTextFieldDestinationDir = new javax.swing.JTextField();
        jLabelDestinationDir = new javax.swing.JLabel();
        jButtonSelectSource = new javax.swing.JButton();
        jButtonSetDestination = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSearchTerms = new javax.swing.JTable();
        jLabelSearchTermsTable = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaSampleOutput = new javax.swing.JTextArea();
        jLabelSampleOutput = new javax.swing.JLabel();
        jButtonSplitPDF = new javax.swing.JButton();
        jTextPrefix = new javax.swing.JTextField();
        jLabelPrefix = new javax.swing.JLabel();
        jButtonDeleteRule = new javax.swing.JButton();
        jButtonNewSearchTerm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDFBatchSplitter");
        setResizable(false);

        jTextSourceFile.setEditable(false);

        jLabelSourceFile.setLabelFor(jTextSourceFile);
        jLabelSourceFile.setText("Source PDF: ");
        jLabelSourceFile.setToolTipText("Select the PDF to be split");

        jTextFieldDestinationDir.setEditable(false);

        jLabelDestinationDir.setLabelFor(jLabelDestinationDir);
        jLabelDestinationDir.setText("Destination directory: ");

        jButtonSelectSource.setText("Select source...");
        jButtonSelectSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectSourceActionPerformed(evt);
            }
        });

        jButtonSetDestination.setText("Select destination...");
        jButtonSetDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetDestinationActionPerformed(evt);
            }
        });

        jTableSearchTerms.setBackground(new java.awt.Color(234, 232, 232));
        jTableSearchTerms.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTableSearchTerms.setFont(new java.awt.Font("Courier", 1, 14)); // NOI18N
        jTableSearchTerms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableSearchTerms.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableSearchTerms.setDoubleBuffered(true);
        jTableSearchTerms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableSearchTerms.setShowGrid(true);
        jScrollPane1.setViewportView(jTableSearchTerms);

        jLabelSearchTermsTable.setLabelFor(jTableSearchTerms);
        jLabelSearchTermsTable.setText("Search terms:");

        jTextAreaSampleOutput.setEditable(false);
        jTextAreaSampleOutput.setColumns(20);
        jTextAreaSampleOutput.setFont(new java.awt.Font("Courier", 0, 12)); // NOI18N
        jTextAreaSampleOutput.setRows(8);
        jScrollPane2.setViewportView(jTextAreaSampleOutput);

        jLabelSampleOutput.setLabelFor(jTextAreaSampleOutput);
        jLabelSampleOutput.setText("Sample output from PDF:");
        jLabelSampleOutput.setToolTipText("Displays an example of the textual representation of the PDF");

        jButtonSplitPDF.setBackground(new java.awt.Color(51, 204, 0));
        jButtonSplitPDF.setText("Split PDF!");
        jButtonSplitPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSplitPDFActionPerformed(evt);
            }
        });

        jTextPrefix.setText("ExamTimetable");
        jTextPrefix.setToolTipText("The prefix to append to the destination file names");

        jLabelPrefix.setLabelFor(jTextPrefix);
        jLabelPrefix.setText("Prefix: ");

        jButtonDeleteRule.setText("Delete search term");
        jButtonDeleteRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRuleActionPerformed(evt);
            }
        });

        jButtonNewSearchTerm.setText("New search term");
        jButtonNewSearchTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewSearchTermActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(jLabelSearchTermsTable, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelDestinationDir, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                    .addComponent(jLabelSourceFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelPrefix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldDestinationDir, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextSourceFile, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextPrefix, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonSelectSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSetDestination, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addComponent(jLabelSampleOutput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonNewSearchTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonDeleteRule, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(jButtonSplitPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSourceFile)
                    .addComponent(jButtonSelectSource))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDestinationDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDestinationDir)
                    .addComponent(jButtonSetDestination))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPrefix))
                .addGap(18, 18, 18)
                .addComponent(jLabelSearchTermsTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteRule)
                    .addComponent(jButtonNewSearchTerm))
                .addGap(18, 18, 18)
                .addComponent(jButtonSplitPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelSampleOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectSourceActionPerformed
        String src = PDFBatchSplitter.selectSourceFile();
        if (src != null && !src.trim().isEmpty()) {
            this.jTextSourceFile.setText(src);
        }
    }//GEN-LAST:event_jButtonSelectSourceActionPerformed

    private void jButtonSetDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetDestinationActionPerformed
        String dest = PDFBatchSplitter.selectDestinationDirectory();
        if (dest != null && !dest.trim().isEmpty()) {
            this.jTextFieldDestinationDir.setText(dest);
        }
    }//GEN-LAST:event_jButtonSetDestinationActionPerformed

    private void jButtonSplitPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSplitPDFActionPerformed
        try {
            // first, attempt to populate the search terms entity
            List<SearchTerm> terms = updateSearchTerms();
            PDFBatchSplitter.search = terms;
            PDFBatchSplitter.processBatch(this.jTextPrefix.getText());
        } catch (Exception ex) {
            PDFBatchSplitter.outputExceptionToUser(ex);
        }
    }//GEN-LAST:event_jButtonSplitPDFActionPerformed

    private void jButtonNewSearchTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewSearchTermActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.jTableSearchTerms.getModel();
        model.addRow(new Object[]{"", "", ""});
    }//GEN-LAST:event_jButtonNewSearchTermActionPerformed

    private void jButtonDeleteRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRuleActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.jTableSearchTerms.getModel();
        IntStream.of(this.jTableSearchTerms.getSelectedRows())
                .boxed()
                .sorted(Collections.reverseOrder())
                .map(this.jTableSearchTerms::convertRowIndexToModel) // support for sorted table
                .forEach(model::removeRow);
    }//GEN-LAST:event_jButtonDeleteRuleActionPerformed

    /**
     * Populates a List of search terms from the UI table
     *
     * @return List of SearchTerm objects
     */
    private List<SearchTerm> updateSearchTerms() throws Exception {
        List<SearchTerm> terms = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) this.jTableSearchTerms.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            SearchTerm t = new SearchTerm(String.valueOf(model.getValueAt(i, 0)), String.valueOf(model.getValueAt(i, 1)), Integer.parseInt((String) model.getValueAt(i, 2)));
            terms.add(t);
        }
        if (!terms.isEmpty()) {
            return terms;
        } else {
            throw new Exception("Search terms were not valid!");
        }
    }

    /**
     * Updates the mini PDF output viewer box
     *
     * @param output Sample output to populate
     */
    public void updatePDFViewer(String output) {
        this.jTextAreaSampleOutput.setText(output);
        // scroll to top:
        this.jTextAreaSampleOutput.setSelectionStart(0);
        this.jTextAreaSampleOutput.setSelectionEnd(0);
    }

    /**
     * Simple helper method to disable UI elements after a batch process has
     * completed, but keeping the sample output pane at the bottom active for
     * analysis if required
     */
    public void disableElements() {
        this.jTextPrefix.setEnabled(false);
        this.jTableSearchTerms.setEnabled(false);
        this.jButtonSelectSource.setEnabled(false);
        this.jButtonSetDestination.setEnabled(false);
        this.jButtonSplitPDF.setEnabled(false);
        this.jButtonDeleteRule.setEnabled(false);
        this.jButtonNewSearchTerm.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteRule;
    private javax.swing.JButton jButtonNewSearchTerm;
    private javax.swing.JButton jButtonSelectSource;
    private javax.swing.JButton jButtonSetDestination;
    private javax.swing.JButton jButtonSplitPDF;
    private javax.swing.JLabel jLabelDestinationDir;
    private javax.swing.JLabel jLabelPrefix;
    private javax.swing.JLabel jLabelSampleOutput;
    private javax.swing.JLabel jLabelSearchTermsTable;
    private javax.swing.JLabel jLabelSourceFile;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableSearchTerms;
    private javax.swing.JTextArea jTextAreaSampleOutput;
    private javax.swing.JTextField jTextFieldDestinationDir;
    private javax.swing.JTextField jTextPrefix;
    private javax.swing.JTextField jTextSourceFile;
    // End of variables declaration//GEN-END:variables
}
